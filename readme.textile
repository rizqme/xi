h1. Xi Framework

Currently it is reduced to a loader with a packaging tool. Though it has a stacktracer to make
debugging easier.


h2. Usage


h3. Creating a Library

The library convention of Xi is similar to java. if your library has a namespace like:
@com.domain.package@ you will have to create a file @package.js@ inside @lib/com/domain/@

*Note*: namespace @xi.@ and @app.@ are reserved.

Edit the file and code:
<pre><code>
	
	xi.provide('com.domain.package', function(xi){
		
		xi.require('xi.io'); // Require some lib to be loaded
		xi.using('xi.lang.*') // import all classes of xi.lang to current xi object
		xi.using('xi.lang.Array') // import only Array
		
		var array = xi.Array.uniq([1,2,2,1,3]); // Array is imported from xi.lang
		
		// Private Class
		var PrivateClass = function () {};
		
		// Private Variable
		var someVar = "someVar";
		
		// Public Class
		xi.PublicClass = function () {};
		
		// Public Var
		xi.publicVar = "yes";
	});
	
</code></pre>

h4. Separating Classes from package

If you want to separate Class files from package file just create a folder with the name of your package:
@lib/com/domain/package/@. Then create a file with your ClassName as the name, e.g.: @PublicClass.js@

Edit the file and put:
<pre><code>
	
	xi.provide('com.domain.package.PublicClass', function(xi){
		
		// Dont do this:
		// xi.require('com.domain.package'); // it will cause depedency hell
		
		// define only ONE public Class
		xi.PublicClass = function(){};
	});
	
</code></pre>

Then in the package file:
<pre><code>
	
	xi.provide('com.domain.package', function(xi){
		
		xi.require('com.domain.package.PublicClass');
		
	});
	
</code></pre>

h3. Creating an Application

Open @app/main.js@ and start writing your app :)

h3. Custom path

Define path like this:
<pre><code>
	
	xi.path({
		
		'xi.lang': 'compiled/core.js',
		'xi.lang.Array': 'compiled/core.js',
		'xi.lang.String': 'compiled/core.js',
		'xi.lang.Class': 'compiled/core.js',
		'xi.lang.Object': 'compiled/core.js'
	});
	
</code></pre>